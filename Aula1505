
public static void main(String[] args) {
        int[] vetor = {1, 4, 8, 3, 6, 5, 2, 7};

        System.out.println("\nMerge Sort");

        System.out.println("\nVetor original");
        for (int i = 0; i < vetor.length; i++) {
            System.out.println(" Posicao[" + i + "] = " + vetor[i]);
        }

        System.out.println("\nPassos:");

        int n = vetor.length; // Aqui atribuímos o tamanho do vetor
        int temp;

        // Se vetor tiver exatamente 2 elementos (simula o caso simples)
        if (n == 2) {
            for (int i = 0; i < vetor.length; i++) {
                for (int j = 0; j < vetor.length - 1; j++) {
                    if (vetor[j] > vetor[j + 1]) {
                        temp = vetor[j];
                        vetor[j] = vetor[j + 1];
                        vetor[j + 1] = temp;
                    }
                }
            }
        }

        // Caso geral para n > 2: aplica Merge Sort
        if (n > 2) {
            mergeSort(vetor, n);
        }

        // Exibe vetor ordenado
        System.out.println("\nVetor ordenado:");
        for (int i = 0; i < vetor.length; i++) {
            System.out.println(" Posicao[" + i + "] = " + vetor[i]);
        }
    }

    // Função principal do Merge Sort usando as mesmas variáveis
    public static void mergeSort(int[] vetor, int n) {
        if (n <= 1) return;

        int m = n / 2;

        int[] a = new int[m];
        int[] b = new int[n - m];

        // Copia primeira metade para a
        for (int i = 0; i < m; i++) {
            a[i] = vetor[i];
        }

        // Copia segunda metade para b
        for (int i = m; i < n; i++) {
            b[i - m] = vetor[i];
        }

        // Recursão
        mergeSort(a, m);
        mergeSort(b, n - m);

        // Merge dos vetores a[] e b[] no vetor original
        int i = 0, j = 0, k = 0;
        while (i < m && j < (n - m)) {
            if (a[i] <= b[j]) {
                vetor[k++] = a[i++];
            } else {
                vetor[k++] = b[j++];
            }
        }

        // Copia o restante de a[], se houver
        while (i < m) {
            vetor[k++] = a[i++];
        }

        // Copia o restante de b[], se houver
        while (j < (n - m)) {
            vetor[k++] = b[j++];
        }
    }
}

if (n <= 1) return;
é usada na função mergeSort para parar a recursão quando o vetor (ou subvetor) tem 1 elemento ou nenhum.

✅ Por que isso é importante?
O algoritmo Merge Sort funciona assim:

Ele divide o vetor em dois subvetores.

Depois, chama recursivamente o mergeSort para ordenar cada metade.

Por fim, junta (merge) essas duas metades ordenadas.

Mas... se o vetor tiver 1 ou 0 elementos, ele já está ordenado. Por isso:

🔍 Significado da linha:
java
Copiar
Editar
if (n <= 1) return;
Se o tamanho n do vetor for 1 ou 0, não precisa ordenar, então a função simplesmente retorna e não faz mais nada.

Isso impede chamadas infinitas da função recursiva.

🧠 Exemplo:
Se o vetor for: {5}

Ele tem apenas 1 elemento (n == 1), então ele já está ordenado.

A função mergeSort vê isso e sai imediatamente com return.

✅ Conclusão:
Essa linha é essencial para o funcionamento correto e seguro do Merge Sort. Ela serve como caso base da recursão.


public class OrdenacaoQuickSort {
public static void main(String[] args) {
        int[] vetor = {1, 4, 8, 3, 6, 5, 2, 7};

        System.out.println("\nQuick Sort");

        System.out.println("\nVetor original:");
        for (int i = 0; i < vetor.length; i++) {
            System.out.println(" Posicao[" + i + "] = " + vetor[i]);
        }

        quickSort(vetor, 0, vetor.length - 1); // Chamada principal do QuickSort

        System.out.println("\nVetor ordenado:");
        for (int i = 0; i < vetor.length; i++) {
            System.out.println(" Posicao[" + i + "] = " + vetor[i]);
        }
    }

    public static void quickSort(int[] vetor, int IniVet, int FimVet) 
    {
        int i = IniVet;
        int j = FimVet;
        int pivo = vetor[(IniVet + FimVet) / 2];
        int aux;

        while (i < j) {
            while (vetor[i] < pivo) {
                i++;
            }
            while (vetor[j] > pivo) {
                j--;
            }
            if (i <= j) {
                // Troca os elementos
                aux = vetor[i];
                vetor[i] = vetor[j];
                vetor[j] = aux;
                i++;
                j--;
            }
        }

        // Chamada recursiva para as partições
        if (j > IniVet) {
            quickSort(vetor, IniVet, j);
        }
        if (i < FimVet) {
            quickSort(vetor, i, FimVet);
        }
    }
}
