public static void main(String[] args) {
        int[] vetor = {1, 4, 8, 3, 6, 5, 2, 7};

        System.out.println("\nMerge Sort");

        System.out.println("\nVetor original");
        for (int i = 0; i < vetor.length; i++) {
            System.out.println(" Posicao[" + i + "] = " + vetor[i]);
        }

        System.out.println("\nPassos:");

        int n = vetor.length; // Aqui atribuímos o tamanho do vetor
        int temp;

        // Se vetor tiver exatamente 2 elementos (simula o caso simples)
        if (n == 2) {
            for (int i = 0; i < vetor.length; i++) {
                for (int j = 0; j < vetor.length - 1; j++) {
                    if (vetor[j] > vetor[j + 1]) {
                        temp = vetor[j];
                        vetor[j] = vetor[j + 1];
                        vetor[j + 1] = temp;
                    }
                }
            }
        }

        // Caso geral para n > 2: aplica Merge Sort
        if (n > 2) {
            mergeSort(vetor, n);
        }

        // Exibe vetor ordenado
        System.out.println("\nVetor ordenado:");
        for (int i = 0; i < vetor.length; i++) {
            System.out.println(" Posicao[" + i + "] = " + vetor[i]);
        }
    }

    // Função principal do Merge Sort usando as mesmas variáveis
    public static void mergeSort(int[] vetor, int n) {
        if (n <= 1) return;

        int m = n / 2;

        int[] a = new int[m];
        int[] b = new int[n - m];

        // Copia primeira metade para a
        for (int i = 0; i < m; i++) {
            a[i] = vetor[i];
        }

        // Copia segunda metade para b
        for (int i = m; i < n; i++) {
            b[i - m] = vetor[i];
        }

        // Recursão
        mergeSort(a, m);
        mergeSort(b, n - m);

        // Merge dos vetores a[] e b[] no vetor original
        int i = 0, j = 0, k = 0;
        while (i < m && j < (n - m)) {
            if (a[i] <= b[j]) {
                vetor[k++] = a[i++];
            } else {
                vetor[k++] = b[j++];
            }
        }

        // Copia o restante de a[], se houver
        while (i < m) {
            vetor[k++] = a[i++];
        }

        // Copia o restante de b[], se houver
        while (j < (n - m)) {
            vetor[k++] = b[j++];
        }
    }
}
